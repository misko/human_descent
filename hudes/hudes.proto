syntax = "proto2";

package hudes;

message DimAndStep {
  required int32 dim = 1;
  required float step = 2;
}

message Config {
  required int32 seed = 1;
  required int32 dims_at_a_time = 2;
  required int32 mesh_grid_size = 3;
  required float mesh_step_size = 4;
  required int32 mesh_grids = 5;
  required int32 batch_size = 6;
  required string dtype = 7;
}

message TrainLossAndPreds {
  required double train_loss = 1;
  repeated float preds = 2; // Flattened predictions
  repeated int32 preds_shape = 3; // Shape of the predictions
  repeated float confusion_matrix = 4; // Flattened confusion matrix
  repeated int32 confusion_matrix_shape = 5; // Shape of the confusion matrix
}
message ValLoss {
  required double val_loss = 1;
}

message BatchExamples {
  enum Type {
    IMG_BW = 0;
  }
  required Type type = 1;
  required int32 n = 2;
  repeated float train_data = 3; // Flattened data as repeated float
  repeated int32 train_data_shape = 4; // Shape of the data as a list of integers
  repeated float train_labels = 5; // Flattened labels as repeated float
  repeated int32 train_labels_shape = 6; // Shape of the labels as a list of integers

  required int32 batch_idx = 8;

}

message Control {
  enum Type {
    CONTROL_DIMS = 0;
    CONTROL_TRAIN_LOSS_AND_PREDS = 1;
    CONTROL_VAL_LOSS = 2;
    CONTROL_BATCH_EXAMPLES = 3;
    CONTROL_SPEED_RUN_START = 10;
    CONTROL_HIGH_SCORE_LOG = 11;
    CONTROL_NEXT_BATCH = 101;
    CONTROL_NEXT_DIMS = 102;
    CONTROL_CONFIG = 103;
    CONTROL_MESHGRID_RESULTS= 104;
    CONTROL_SGD_STEP = 105;
    CONTROL_QUIT = 901;
  }
  required Type type = 1;

  repeated DimAndStep dims_and_steps = 200;

  optional Config config = 201;

  optional TrainLossAndPreds train_loss_and_preds = 202;
  optional ValLoss val_loss = 203;
  optional int32 request_idx = 204;
  optional BatchExamples batch_examples = 205;
  repeated float mesh_grid_results = 207;  // Updated to repeated float
  repeated int32 mesh_grid_shape = 208;    // Add the shape information
  optional int32 sgd_steps = 209;
  optional int32 total_sgd_steps = 210;
  // Remaining seconds in Speed Run. May be present in CONTROL_TRAIN_LOSS_AND_PREDS,
  // CONTROL_VAL_LOSS, and CONTROL_MESHGRID_RESULTS while a run is active
  // (or 0 when the run just finished).
  optional int32 speed_run_seconds_remaining = 212;
  // True when a VAL message marks the end of the Speed Run window
  optional bool speed_run_finished = 213;
  // High score submission (one per run)
  message HighScore {
    required string name = 1; // 4-char uppercase
    optional double score = 2; // equals best_val_loss (lower is better)
    optional int32 duration_seconds = 3;
    optional int32 request_idx = 4;
  }
  optional HighScore high_score = 211; // used with CONTROL_HIGH_SCORE_LOG

}
